

//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++
class Solution {
  public:

    // Note that the size of the array is n-1
    int missingNumber(int n, vector<int>& arr) {

        int ans = 0;
        
        // xor all values of array 
        
        for(int i =0; i<arr.size();i++){
            ans ^= arr[i];
        }
        
        // xor all [0,n] values
        // int n  = arr.size();
        for(int i = 0; i<=n; i++){
            ans ^= i;
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        vector<int> arr(n - 1);
        for (int i = 0; i < n - 1; ++i)
            cin >> arr[i];
        Solution obj;
        cout << obj.missingNumber(n, arr) << "\n";
    }
    return 0;
}
// } Driver Code Ends

// ///////////////////////////// revision /////////////////////////


//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++
class Solution {
  public:
  int sumApproach(int n, vector<int>&arr){
        int sum = 0;
        for(int i = 0; i< arr.size(); i++){
           sum = sum + arr[i]; 
        }
        
        int totalSum = n * (1+n)/2;
        
        int ans = totalSum - sum;
         return ans;
  }
  
  int xorApproach(int n, vector<int>&arr){
      
      int ans = 0;
      
      //1. xor all elements of array
      for(int i = 0; i<n-1; i++ )
      ans ^= arr[i];
      
      //2. xor all values of range
      for(int i = 1; i<=n ; i++){
          ans = ans^i;
      }
      
      return ans;
  }

    // Note that the size of the array is n-1
    int missingNumber(int n, vector<int>& arr) {

        // sumApproach( n, arr);
        xorApproach(n, arr);
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;

        vector<int> arr(n - 1);
        for (int i = 0; i < n - 1; ++i)
            cin >> arr[i];
        Solution obj;
        cout << obj.missingNumber(n, arr) << "\n";
    }
    return 0;
}
// } Driver Code Ends



