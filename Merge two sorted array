in O(1) space complexity

////////////////// leetcode ////////////////////////////

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1; // Pointer for nums1
        int j = n - 1; // Pointer for nums2
        int k = m + n - 1; // Pointer for merged array in nums1

        // Start merging from the end of nums1 and nums2
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }

        // If there are remaining elements in nums2, copy them
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }

        // No need to copy elements from nums1 as they are already in place
    }
};


////////////////// coding ninja ///////////////////

#include<vector>

void mergeTwoSortedArraysWithoutExtraSpace(vector<long long> &a, vector<long long> &b){
	
	int m = a.size();
	int n = b.size();

	int i = m-1;
	int j = 0;


	while(i >= 0 && j < n){
		if(a[i] > b[j]){
			swap(a[i], b[j]);
			i--;
			j++;
		}
		else{
			break; 
		}

	}
	sort(a.begin(), a.end());
	sort(b.begin(), b.end());
}
