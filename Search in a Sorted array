class Solution {
public:
    int pivotIndex(vector<int>nums){
        int n = nums.size();
        int s = 0;
        int e = n -1;
        int mid = s + (e-s)/2;

        while(s<=e){
            if(s == e){
                // corner case
                return s;
            }
            else if(mid + 1 < n && nums[mid] > nums[mid + 1]){
                return mid;
            }
            else if(mid - 1 >= 0 && nums[mid] < nums[mid - 1]){
                return mid - 1;
            }
            else if(nums[s] > nums[mid]){
                // left me jao
                e = mid - 1;
            }
            else{
                // right me jao
                s = mid + 1;
            }
            mid = s + (e-s)/2;
        }
        return -1;
    }

    int binarySearch(vector<int>nums, int target, int s, int e){
        int n = nums.size();
        int mid = s + (e-s)/2;

        while(s<=e){
            if(nums[mid] == target){
                return mid;
            }
            else if(nums[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
            mid = s + (e - s)/2;
        }
        return -1;
    }
    int search(vector<int>& nums, int target) {
        
        int pivot = pivotIndex(nums);
        int ans = -1;
        int n = nums.size();

        if(target >= nums[0] && target <= nums[pivot]){
            ans = binarySearch(nums, target, 0, pivot);
        }
        else{
            ans = binarySearch(nums, target, pivot + 1, n-1 );
        }
        return ans;
    }
};
